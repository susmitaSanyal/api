syntax = "proto3";

package viam.component.movementsensor.v1;

import "common/v1/common.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";

option go_package = "go.viam.com/api/component/movementsensor/v1";
option java_package = "com.viam.component.movementsensor.v1";

// NmeaGGAFix includes fix quality of a GPS which is obtained from the GGA message.
// More information on GGA messages here
// https://receiverhelp.trimble.com/alloy-gnss/en-us/NMEA-0183messages_GGA.html
// Generally a fix of 1 or 2 lends to large position errors, ideally we want a
// fix of 4-5. Other fixes are unsuitable for outdoor navigation.
// The meaning of each fix value is documented here
// https://docs.novatel.com/OEM7/Content/Logs/GPGGA.htm#GPSQualityIndicators
enum NmeaGGAFix {
  NMEA_GGA_FIX_INVALID_UNSPECIFIED = 0;
  NMEA_GGA_FIX_GNSS = 1;
  NMEA_GGA_FIX_DGPS = 2;
  NMEA_GGA_FIX_PPS = 3;
  NMEA_GGA_FIX_RTK_FIXED = 4;
  NMEA_GGA_FIX_RTK_FLOAT = 5;
  NMEA_GGA_FIX_DEAD_RECKONING = 6;
  NMEA_GGA_FIX_MANUAL = 7;
  NMEA_GGA_FIX_SIMULATION = 8;
}

service MovementSensorService {
  rpc GetLinearVelocity(GetLinearVelocityRequest) returns (GetLinearVelocityResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/movementsensor/{name}/linear_velocity"
    };
  }

  rpc GetAngularVelocity(GetAngularVelocityRequest) returns (GetAngularVelocityResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/movementsensor/{name}/angular_velocity"
    };
  }

  rpc GetCompassHeading(GetCompassHeadingRequest) returns (GetCompassHeadingResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/movementsensor/{name}/compass_heading"
    };
  }

  rpc GetOrientation(GetOrientationRequest) returns (GetOrientationResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/movementsensor/{name}/orientation"
    };
  }

  rpc GetPosition(GetPositionRequest) returns (GetPositionResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/movementsensor/{name}/position"
    };
  }

  rpc GetProperties(GetPropertiesRequest) returns (GetPropertiesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/movementsensor/{name}/properties"
    };
  }

  rpc GetAccuracy(GetAccuracyRequest) returns (GetAccuracyResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/movementsensor/{name}/accuracy"
    };
  }

  rpc GetLinearAcceleration(GetLinearAccelerationRequest) returns (GetLinearAccelerationResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/movementsensor/{name}/linear_acceleration"
    };
  }

  rpc DoCommand(common.v1.DoCommandRequest) returns (common.v1.DoCommandResponse) {
    option (google.api.http) = {
      post: "/viam/api/v1/component/movementsensor/{name}/do_command"
    };
  }

  // GetGeometries returns the geometries of the component in their current configuration
  rpc GetGeometries(common.v1.GetGeometriesRequest) returns (common.v1.GetGeometriesResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/movementsensor/{name}/geometries"
    };
  }

  // GetReadings returns the readings of a sensor of the underlying robot.
  rpc GetReadings(common.v1.GetReadingsRequest) returns (common.v1.GetReadingsResponse) {
    option (google.api.http) = {
      get: "/viam/api/v1/component/movementsensor/{name}/readings"
    };
  }
}

message GetLinearVelocityRequest {
  // Name of a movement sensor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetLinearVelocityResponse {
  // Linear velocity in m/s across x/y/z axes
  common.v1.Vector3 linear_velocity = 1;
}

message GetAngularVelocityRequest {
  // Name of a movement sensor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetAngularVelocityResponse {
  // Angular velocity in degrees/s across x/y/z axes
  common.v1.Vector3 angular_velocity = 1;
}

message GetCompassHeadingRequest {
  // Name of a movement sensor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetCompassHeadingResponse {
  // A number from 0-359 in degrees where
  // 0 is North, 90 is East, 180 is South, and 270 is   West
  double value = 1;
}

message GetOrientationRequest {
  // Name of a movement sensor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetOrientationResponse {
  // Orientation is returned as an orientation message with
  // OX OY OZ as unit-normalized components of the axis of the vector, and Theta in degrees
  common.v1.Orientation orientation = 1;
}

message GetPositionRequest {
  // Name of a movement sensor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetPositionResponse {
  // Position is returned in a coordinate of latitute and longitude
  // and an altidue in meters
  common.v1.GeoPoint coordinate = 1;
  float altitude_m = 2;
}

message GetPropertiesRequest {
  // Name of a movement sensor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetPropertiesResponse {
  bool linear_velocity_supported = 1;
  bool angular_velocity_supported = 2;
  bool orientation_supported = 3;
  bool position_supported = 4;
  bool compass_heading_supported = 5;
  bool linear_acceleration_supported = 6;
}

message GetAccuracyRequest {
  // Name of a movement sensor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetAccuracyResponse {
  map<string, float> accuracy = 1;
  optional float position_hdop = 2;
  optional float position_vdop = 3;
  optional NmeaGGAFix position_nmea_gga_fix = 4;
  optional float compass_degrees_error = 5;
}

message GetLinearAccelerationRequest {
  // Name of a movement sensor
  string name = 1;
  // Additional arguments to the method
  google.protobuf.Struct extra = 99;
}

message GetLinearAccelerationResponse {
  // Linear acceleration in m/s across x/y/z axes
  common.v1.Vector3 linear_acceleration = 1;
}
